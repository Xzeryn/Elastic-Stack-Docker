
volumes:
  mldata01:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
  logstashdata02:
    driver: local
  logstashdata03:
    driver: local    

services:
  # The ml01 is configured to be a dedicated ML node within the cluster large enough to download and install the ELSER model
  ml01:
    extends:
      file: elastic-stack.yml
      service: elasticsearch
    profiles:
      - ml
    depends_on:
      es01:
        condition: service_healthy
    volumes:
      - mldata01:/usr/share/elasticsearch/data
    environment:
      - node.name=ml01
      - node.roles=ml, remote_cluster_client
      - discovery.seed_hosts=es01
      - xpack.security.http.ssl.key=certs/ml01/ml01.key
      - xpack.security.http.ssl.certificate=certs/ml01/ml01.crt
      - xpack.security.transport.ssl.key=certs/ml01/ml01.key
      - xpack.security.transport.ssl.certificate=certs/ml01/ml01.crt
    mem_limit: ${ML_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Metricbeat is used for stack monitoring (Optional)
  metricbeat01:
    profiles:
      - monitoring
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    restart: always
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "./config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200,https://es02:9200,https://es03:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
      - CA_CERT=certs/ca/ca.crt
      - ES_CERT=certs/es01/es01.crt
      - ES_KEY=certs/es01/es01.key
      - KB_CERT=certs/kibana/kibana.crt
      - KB_KEY=certs/kibana/kibana.key
    command:
      -strict.perms=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/metricbeat/certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Filebeat is configured to ingest data from the filebeat_ingest_data folder, drop .log files in this folder to ingest
  # Filebeat is also configured to pull logs for all docker containers (visible in the Logs Stream viewer) (Optional)
  filebeat01:
    profiles:
      - filebeat
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    restart: always
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "./config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
      - CA_CERT=certs/ca/ca.crt
    command:
      -strict.perms=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/filebeat/certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Logstash is configured to ingest data from the logstash_ingest_data folder (Optional)
  logstash01:
    profiles:
      - logstash
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    restart: always
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/logstash//certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # The webapp is an example insturmentation of the elastic APM agent. (Optional)
  # Access the webapp through http://localhost:8000
  webapp:
    profiles:
      - apm
    image: webapp:${STACK_VERSION}
    build:
      context: app
    restart: always
    volumes:
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    ports:
      - ${APM_APP_PORT}:8000
    healthcheck:
      test:
        [ 
          "CMD-SHELL", 
          "curl -s http://localhost:8000",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # The container-agent is an example of insturmenting an agent within a docker container
  container-agent:
    extends:
      file: elastic-stack.yml
      service: elastic-agent
    profiles:
      - agent
    depends_on:
      fleet-server:
        condition: service_healthy
    hostname: container-agent
    volumes:
      - "./agent_ingest_data:/tmp/ingest_data"
      # The following line is not required, nor is the `entrypoint` line. They are running a script to add 
      # integrations to the Fleet policy this agent connects to for demo functionality
      - ./config/agent_add_integrations-startup.sh:/usr/share/elastic-agent/agent-startup.sh
    entrypoint: ["agent-startup.sh"]
    ports:
      - ${AGENT_SYSLOG_UDP_PORT}:9003
      - ${AGENT_SYSLOG_TCP_PORT}:9004
    environment:
      - FLEET_TOKEN_POLICY_NAME=Docker-Container-Policy
      - INTEGRATION_LOGS_VERSION=${INTEGRATION_LOGS_VERSION}
      - INTEGRATION_TCP_LOGS_VERSION=${INTEGRATION_TCP_LOGS_VERSION}
      - INTEGRATION_UDP_LOGS_VERSION=${INTEGRATION_UDP_LOGS_VERSION}

# Kafka demo and Logstash in and out
# # Logstash_in is configured to ingest data from the logstash_ingest_data folder (Optional) and send it to Kafka topic

  logstash_in:
    profiles:
      - kafka
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
      kafka01:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash_in
    restart: always
    user: root
    volumes:
      - logstashdata02:/usr/share/logstash/data
      - "./config/logstash_in.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
    command: [ "-f", "/usr/share/logstash/pipeline/logstash.conf" ]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --max-time 5 kafka01:9092 -o /dev/null",
        ]
      interval: 30s
      timeout: 10s
      retries: 120

# Logstash_out is configured to subscribe to the kafka topic and send the data from the elastic

  logstash_out:
    profiles:
      - kafka
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
      kafka01:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash_out
    restart: always
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata03:/usr/share/logstash/data
      - "./config/logstash_out.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    command: [ "-f", "/usr/share/logstash/pipeline/logstash.conf" ]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/logstash/certs/ca/ca.crt https://es01:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  zookeeper:
    profiles: ["kafka"]
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka01:
    profiles: ["kafka"]
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka01
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka01:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: "1"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s 
           